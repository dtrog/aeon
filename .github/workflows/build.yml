name: continuous-integration/gh-actions/cli

on: [push, pull_request]

jobs:
  build-macos:
    runs-on: macOS-latest
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive
        fetch-depth: 0
    - name: install dependencies
      run: HOMEBREW_NO_AUTO_UPDATE=1  brew install boost openssl zmq libpgm miniupnpc ldns expat libunwind-headers protobuf
    - name: fetch zmq.hpp
      run: brew tap osrf/simulation && brew install cppzmq
    - name: build
      run: USE_SINGLE_BUILDDIR=1 make release-static -j3
    - name: archive
      run: |
        export ARTIFACT_NAME="europacash-mac-x64-$(git describe --tags)"
        mkdir $ARTIFACT_NAME
        cp bin/* $ARTIFACT_NAME
        tar cvzf $ARTIFACT_NAME.tar.bz2 $ARTIFACT_NAME
        echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
      working-directory: build/release
    - name: SHA256 checksum
      run: openssl sha256 ${{ env.ARTIFACT_NAME }}.tar.bz2
      working-directory: build/release
    - uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: build/release/${{ env.ARTIFACT_NAME }}.tar.bz2
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ env.ARTIFACT_NAME }}.tar.bz2
        path: build/release/${{ env.ARTIFACT_NAME }}.tar.bz2
    - name: upload to transfer.sh
      run: curl --upload-file build/release/${{ env.ARTIFACT_NAME }}.tar.bz2 https://transfer.sh/${{ env.ARTIFACT_NAME }}.tar.bz2

  build-windows:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive
        fetch-depth: 0
    - uses: eine/setup-msys2@v2
      with:
        update: true
        install: mingw-w64-x86_64-toolchain make mingw-w64-x86_64-cmake mingw-w64-x86_64-boost mingw-w64-x86_64-openssl mingw-w64-x86_64-zeromq mingw-w64-x86_64-libsodium mingw-w64-x86_64-protobuf-c git zip curl
    - name: build
      run: USE_SINGLE_BUILDDIR=1 make release-static-win64 -j2
    - name: copy dependent DLLs
      run: |
        cp $MSYSTEM_PREFIX/bin/libwinpthread-1.dll .
        cp $MSYSTEM_PREFIX/bin/libstdc++-6.dll .
        cp $MSYSTEM_PREFIX/bin/libssp-0.dll .
        cp $MSYSTEM_PREFIX/bin/libiconv-2.dll .
        cp $MSYSTEM_PREFIX/bin/libgcc_s_seh-1.dll .
      working-directory: build/release/bin
    - name: archive
      run: |
        export ARTIFACT_NAME="europacash-win-x64-$(git describe --tags)"
        mkdir $ARTIFACT_NAME
        cp bin/* $ARTIFACT_NAME
        zip -r9 $ARTIFACT_NAME.zip $ARTIFACT_NAME
        echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
      working-directory: build/release
    - name: SHA256 checksum
      run: openssl sha256 ${{ env.ARTIFACT_NAME }}.zip
      working-directory: build/release
    - uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: build/release/${{ env.ARTIFACT_NAME }}.zip
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ env.ARTIFACT_NAME }}.zip
        path: build/release/${{ env.ARTIFACT_NAME }}.zip
    - name: upload to transfer.sh
      run: curl --upload-file build/release/${{ env.ARTIFACT_NAME }}.zip https://transfer.sh/${{ env.ARTIFACT_NAME }}.zip

  build-ubuntu:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive
        fetch-depth: 0
    - name: remove bundled boost
      run: sudo rm -rf /usr/local/share/boost
    - name: set apt conf
      run: |
        echo "Acquire::Retries \"3\";" | sudo tee -a /etc/apt/apt.conf.d/80-custom
        echo "Acquire::http::Timeout \"120\";" | sudo tee -a /etc/apt/apt.conf.d/80-custom
        echo "Acquire::ftp::Timeout \"120\";" | sudo tee -a /etc/apt/apt.conf.d/80-custom
    - name: update apt
      run: sudo apt update
    - name: install monero dependencies
      run: sudo apt -y install build-essential cmake libboost-all-dev miniupnpc libunbound-dev graphviz doxygen libunwind8-dev pkg-config libssl-dev libsodium-dev
    - name: build & install static zmq
      run: |
        git clone https://github.com/zeromq/libzmq
        cd libzmq
        git checkout v4.3.2
        mkdir build && cd build
        cmake -D WITH_PERF_TOOL=OFF -D ZMQ_BUILD_TESTS=OFF -D ENABLE_CPACK=OFF -D CMAKE_BUILD_TYPE=Release ..
        make -j3
        sudo make install
        sudo curl -L https://raw.githubusercontent.com/zeromq/cppzmq/master/zmq.hpp --output /usr/local/include/zmq.hpp
      working-directory: ..
    - name: build
      run: USE_SINGLE_BUILDDIR=1 make release-static -j3
    - name: archive
      run: |
        export ARTIFACT_NAME="europacash-linux-x64-$(git describe --tags)"
        mkdir $ARTIFACT_NAME
        cp bin/* $ARTIFACT_NAME
        tar cvzf $ARTIFACT_NAME.tar.bz2 $ARTIFACT_NAME
        echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
      working-directory: build/release
    - name: SHA256 checksum
      run: openssl sha256 ${{ env.ARTIFACT_NAME }}.tar.bz2
      working-directory: build/release
    - uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: build/release/${{ env.ARTIFACT_NAME }}.tar.bz2
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ env.ARTIFACT_NAME }}.tar.bz2
        path: build/release/${{ env.ARTIFACT_NAME }}.tar.bz2
    - name: upload to transfer.sh
      run: curl --upload-file build/release/${{ env.ARTIFACT_NAME }}.tar.bz2 https://transfer.sh/${{ env.ARTIFACT_NAME }}.tar.bz2

  libwallet-ubuntu:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive
    - name: remove bundled boost
      run: sudo rm -rf /usr/local/share/boost
    - name: set apt conf
      run: |
        echo "Acquire::Retries \"3\";" | sudo tee -a /etc/apt/apt.conf.d/80-custom
        echo "Acquire::http::Timeout \"120\";" | sudo tee -a /etc/apt/apt.conf.d/80-custom
        echo "Acquire::ftp::Timeout \"120\";" | sudo tee -a /etc/apt/apt.conf.d/80-custom
    - name: update apt
      run: sudo apt update
    - name: install monero dependencies
      run: sudo apt -y install build-essential cmake libboost-all-dev miniupnpc libunbound-dev graphviz doxygen libunwind8-dev pkg-config libssl-dev libzmq3-dev libsodium-dev libnorm-dev libpgm-dev
    - name: build
      run: cmake -DBUILD_GUI_DEPS=ON && make -j3

  test-ubuntu:
    needs: build-ubuntu
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive
    - name: remove bundled boost
      run: sudo rm -rf /usr/local/share/boost
    - name: set apt conf
      run: |
        echo "Acquire::Retries \"3\";" | sudo tee -a /etc/apt/apt.conf.d/80-custom
        echo "Acquire::http::Timeout \"120\";" | sudo tee -a /etc/apt/apt.conf.d/80-custom
        echo "Acquire::ftp::Timeout \"120\";" | sudo tee -a /etc/apt/apt.conf.d/80-custom
    - name: update apt
      run: sudo apt update
    - name: install monero dependencies
      run: sudo apt -y install build-essential cmake libboost-all-dev miniupnpc libunbound-dev graphviz doxygen libunwind8-dev pkg-config libssl-dev libzmq3-dev libsodium-dev libnorm-dev libpgm-dev
    - name: install requests
      run: pip install requests
    - name: tests
      env:
        CTEST_OUTPUT_ON_FAILURE: ON
      run: make release-test -j3



  ibdtest-macos:
    needs: build-macos
    runs-on: macOS-latest
    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 0
    - name: determine artifact name
      run: |
        export ARTIFACT_NAME="europacash-mac-x64-$(git describe --tags)"
        echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
    - uses: actions/download-artifact@v3
      with:
        name: ${{ env.ARTIFACT_NAME }}.tar.bz2
    - name: extract & install
      run: |
        tar xvf $ARTIFACT_NAME.tar.bz2
        sudo cp $ARTIFACT_NAME/* /usr/local/bin
    - name: run IBD test
      run: europacashd --non-interactive --ibd-test -1

  ibdtest-windows:
    needs: build-windows
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 0
    - uses: eine/setup-msys2@v2
      with:
        update: true
        install: mingw-w64-x86_64-toolchain git unzip curl
    - name: determine artifact name
      run: |
        export ARTIFACT_NAME="europacash-win-x64-$(git describe --tags)"
        echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
    - uses: actions/download-artifact@v3
      with:
        name: ${{ env.ARTIFACT_NAME }}.zip
    - name: extract & install
      run: |
        unzip $ARTIFACT_NAME.zip
        cp $ARTIFACT_NAME/* /usr/bin
    - name: run IBD test
      run: europacashd --non-interactive --ibd-test -1

  ibdtest-ubuntu:
    needs: build-ubuntu
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 0
    - name: determine artifact name
      run: |
        export ARTIFACT_NAME="europacash-linux-x64-$(git describe --tags)"
        echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
    - uses: actions/download-artifact@v3
      with:
        name: ${{ env.ARTIFACT_NAME }}.tar.bz2
    - name: extract & install
      run: |
        tar xvf $ARTIFACT_NAME.tar.bz2
        sudo cp $ARTIFACT_NAME/* /usr/local/bin
    - name: run IBD test
      run: europacashd --non-interactive --ibd-test -1
